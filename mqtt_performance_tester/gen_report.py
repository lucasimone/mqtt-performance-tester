import click
import glob
import logging
import os
import datetime

LOG_FORMAT   = '%(levelname)-7s | %(asctime)s | %(name)40s:%(lineno)-3d| %(message)s'
LOG_FILENAME = "log/gen_report.log"

# Configure Logger
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG, format=LOG_FORMAT, filemode="a")
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter(LOG_FORMAT)

sh = logging.StreamHandler()
sh.setFormatter(formatter)
logger.addHandler(sh)
logger.propagate = True

@click.command()
@click.option('--path', prompt='Path', help='The directory to check all data logs')



def analyze_in_path(path):

    if not os.path.exists(path):
        logger.error("This directory does nor exists!")
        exit(-1)

    logger.error("Start iterating inside %s" %path)
    for directory in glob.glob('%s/*/' % path):
        logger.info("- Check directoty %s ..." % directory)
        report_file = "%s/report.txt" % directory
        if os.path.exists(report_file):
            logger.info("Backup old report")
            dt = str(datetime.datetime.now())
            rename_report = '%s/backup_report_' % (directory) + dt + '.txt'
            os.rename(report_file, rename_report)

        generate_report("%s" % (directory))


def generate_report(data_path):

    path = "%s/" % data_path
    index = 0
    #init_output_file(data_path, num_test)  # INIT FILE

    for filename in glob.glob(os.path.join(path, '*.json')):

        print("-- ANALYZE File : %s" %filename)
        try:

            # file_id = filename.replace(data_path, "")
            file_id = filename.replace(".json", "")

            file_info = filename.replace("%scaputure_"%data_path, "")

            file_info = file_info.split("_")
            timeout = file_info[1]
            rand_factor = file_info[3]
            retry = file_info[5]
            res = file_info[6]


            # write line for this filename
            #write_test_result(index, res, timeout, rand_factor, retry, file_id, data_path, num_test)
            index += 1
        except Exception as error:
            logger.error(" THIS DATA WAS GENERATED BY OLD CLIENT - SKIP!", error)




if __name__ == '__main__':
    logger.error("GenReport script. Please provide the path where all logs are stored")
    analyze_in_path()



